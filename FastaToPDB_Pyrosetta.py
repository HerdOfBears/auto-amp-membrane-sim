{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "eacbcc35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PyRosetta-4 2023 [Rosetta PyRosetta4.Release.python310.ubuntu 2023.40+release.96fa3c54b9f6e46b5bfdeb343261506bc4369812 2023-10-04T07:52:04] retrieved from: http://www.pyrosetta.org\n",
      "(C) Copyright Rosetta Commons Member Institutions. Created in JHU by Sergey Lyskov and PyRosetta Team.\n",
      "core.init: Checking for fconfig files in pwd and ./rosetta/flags\n",
      "core.init: Rosetta version: PyRosetta4.Release.python310.ubuntu r359 2023.40+release.96fa3c54b9f 96fa3c54b9f6e46b5bfdeb343261506bc4369812 http://www.pyrosetta.org 2023-10-04T07:52:04\n",
      "core.init: command: PyRosetta -ex1 -ex2aro -database /home/samith/PyRosetta4/pyrosetta/database\n",
      "basic.random.init_random_generator: 'RNG device' seed mode, using '/dev/urandom', seed=-1653988808 seed_offset=0 real_seed=-1653988808\n",
      "basic.random.init_random_generator: RandomGenerator:init: Normal mode, seed=-1653988808 RG_type=mt19937\n",
      "core.chemical.GlobalResidueTypeSet: Finished initializing fa_standard residue type set.  Created 985 residue types\n",
      "core.chemical.GlobalResidueTypeSet: Total time to initialize 0.503596 seconds.\n",
      "core.scoring.etable: Starting energy table calculation\n",
      "core.scoring.etable: smooth_etable: changing atr/rep split to bottom of energy well\n",
      "core.scoring.etable: smooth_etable: spline smoothing lj etables (maxdis = 6)\n",
      "core.scoring.etable: smooth_etable: spline smoothing solvation etables (max_dis = 6)\n",
      "core.scoring.etable: Finished calculating energy tables.\n",
      "basic.io.database: Database file opened: scoring/score_functions/hbonds/ref2015_params/HBPoly1D.csv\n",
      "basic.io.database: Database file opened: scoring/score_functions/hbonds/ref2015_params/HBFadeIntervals.csv\n",
      "basic.io.database: Database file opened: scoring/score_functions/hbonds/ref2015_params/HBEval.csv\n",
      "basic.io.database: Database file opened: scoring/score_functions/hbonds/ref2015_params/DonStrength.csv\n",
      "basic.io.database: Database file opened: scoring/score_functions/hbonds/ref2015_params/AccStrength.csv\n",
      "basic.io.database: Database file opened: scoring/score_functions/rama/fd/all.ramaProb\n",
      "basic.io.database: Database file opened: scoring/score_functions/rama/fd/prepro.ramaProb\n",
      "basic.io.database: Database file opened: scoring/score_functions/omega/omega_ppdep.all.txt\n",
      "basic.io.database: Database file opened: scoring/score_functions/omega/omega_ppdep.gly.txt\n",
      "basic.io.database: Database file opened: scoring/score_functions/omega/omega_ppdep.pro.txt\n",
      "basic.io.database: Database file opened: scoring/score_functions/omega/omega_ppdep.valile.txt\n",
      "basic.io.database: Database file opened: scoring/score_functions/P_AA_pp/P_AA\n",
      "basic.io.database: Database file opened: scoring/score_functions/P_AA_pp/P_AA_n\n",
      "core.scoring.P_AA: shapovalov_lib::shap_p_aa_pp_smooth_level of 1( aka low_smooth ) got activated.\n",
      "basic.io.database: Database file opened: scoring/score_functions/P_AA_pp/shapovalov/10deg/kappa131/a20.prop\n",
      "basic.io.database: Database file opened: scoring/score_functions/elec_cp_reps.dat\n",
      "core.scoring.elec.util: Read 40 countpair representative atoms\n",
      "core.pack.dunbrack.RotamerLibrary: shapovalov_lib_fixes_enable option is true.\n",
      "core.pack.dunbrack.RotamerLibrary: shapovalov_lib::shap_dun10_smooth_level of 1( aka lowest_smooth ) got activated.\n",
      "core.pack.dunbrack.RotamerLibrary: Binary rotamer library selected: /home/samith/PyRosetta4/pyrosetta/database/rotamer/shapovalov/StpDwn_0-0-0/Dunbrack10.lib.bin\n",
      "core.pack.dunbrack.RotamerLibrary: Using Dunbrack library binary file '/home/samith/PyRosetta4/pyrosetta/database/rotamer/shapovalov/StpDwn_0-0-0/Dunbrack10.lib.bin'.\n",
      "core.pack.dunbrack.RotamerLibrary: Dunbrack 2010 library took 0.157182 seconds to load from binary\n",
      "Designed peptide saved to output_peptide.pdb\n",
      "Total Energy: 13193.79 kcal/mol\n",
      "Residue 1: Total Energy = 75.35 kcal/mol\n",
      "Residue 2: Total Energy = 171.95 kcal/mol\n",
      "Residue 3: Total Energy = 163.29 kcal/mol\n",
      "Residue 4: Total Energy = 590.84 kcal/mol\n",
      "Residue 5: Total Energy = 697.84 kcal/mol\n",
      "Residue 6: Total Energy = 812.29 kcal/mol\n",
      "Residue 7: Total Energy = 522.43 kcal/mol\n",
      "Residue 8: Total Energy = 503.82 kcal/mol\n",
      "Residue 9: Total Energy = 856.45 kcal/mol\n",
      "Residue 10: Total Energy = 658.47 kcal/mol\n",
      "Residue 11: Total Energy = 494.27 kcal/mol\n",
      "Residue 12: Total Energy = 348.00 kcal/mol\n",
      "Residue 13: Total Energy = 735.38 kcal/mol\n",
      "Residue 14: Total Energy = 630.45 kcal/mol\n",
      "Residue 15: Total Energy = 618.57 kcal/mol\n",
      "Residue 16: Total Energy = 591.71 kcal/mol\n",
      "Residue 17: Total Energy = 500.08 kcal/mol\n",
      "Residue 18: Total Energy = 586.19 kcal/mol\n",
      "Residue 19: Total Energy = 486.71 kcal/mol\n",
      "Residue 20: Total Energy = 524.61 kcal/mol\n",
      "Residue 21: Total Energy = 346.59 kcal/mol\n",
      "Residue 22: Total Energy = 542.34 kcal/mol\n",
      "Residue 23: Total Energy = 426.02 kcal/mol\n",
      "Residue 24: Total Energy = 473.78 kcal/mol\n",
      "Residue 25: Total Energy = 435.19 kcal/mol\n",
      "Residue 26: Total Energy = 403.33 kcal/mol\n"
     ]
    }
   ],
   "source": [
    "import pyrosetta\n",
    "from pyrosetta.rosetta.core.pose import Pose\n",
    "from pyrosetta.rosetta.core.chemical import ChemicalManager\n",
    "from pyrosetta import create_score_function\n",
    "from pyrosetta.rosetta.core.kinematics import MoveMap\n",
    "from pyrosetta.rosetta.protocols.minimization_packing import MinMover\n",
    "from pyrosetta.rosetta.core.scoring import ScoreType\n",
    "from Bio import SeqIO\n",
    "\n",
    "def read_sequence_from_fasta(fasta_file):\n",
    "    for record in SeqIO.parse(fasta_file, \"fasta\"):\n",
    "        return str(record.seq)\n",
    "\n",
    "# Amino acid one-letter to three-letter code mapping\n",
    "aa_1_to_3 = {\n",
    "    \"A\": \"ALA\", \"R\": \"ARG\", \"N\": \"ASN\", \"D\": \"ASP\",\n",
    "    \"C\": \"CYS\", \"E\": \"GLU\", \"Q\": \"GLN\", \"G\": \"GLY\",\n",
    "    \"H\": \"HIS\", \"I\": \"ILE\", \"L\": \"LEU\", \"K\": \"LYS\",\n",
    "    \"M\": \"MET\", \"F\": \"PHE\", \"P\": \"PRO\", \"S\": \"SER\",\n",
    "    \"T\": \"THR\", \"W\": \"TRP\", \"Y\": \"TYR\", \"V\": \"VAL\"\n",
    "}\n",
    "\n",
    "# Initialize PyRosetta\n",
    "pyrosetta.init()\n",
    "\n",
    "# Read the amino acid sequence from a FASTA file\n",
    "fasta_file_path = '/home/samith/Downloads/f1/starPep_00000.fasta'  # Replace with your FASTA file path\n",
    "peptide_sequence = read_sequence_from_fasta(fasta_file_path)\n",
    "\n",
    "# Create an empty Pose\n",
    "pose = Pose()\n",
    "\n",
    "# Get a standard residue type set\n",
    "residue_type_set = ChemicalManager.get_instance().residue_type_set(\"fa_standard\")\n",
    "\n",
    "# Add residues to the pose based on the sequence\n",
    "for aa in peptide_sequence:\n",
    "    three_letter_code = aa_1_to_3.get(aa, \"\")\n",
    "    if not three_letter_code:\n",
    "        raise ValueError(f\"Invalid amino acid '{aa}' in sequence.\")\n",
    "    res_type = residue_type_set.name_map(three_letter_code)\n",
    "    residue = pyrosetta.rosetta.core.conformation.ResidueFactory.create_residue(res_type)\n",
    "    pose.append_residue_by_bond(residue)\n",
    "\n",
    "# Create a scoring function\n",
    "scorefxn = create_score_function(\"ref2015\")\n",
    "\n",
    "# Perform energy minimization\n",
    "mm = MoveMap()\n",
    "mm.set_bb(True)\n",
    "mm.set_chi(True)\n",
    "min_mover = MinMover()\n",
    "min_mover.score_function(scorefxn)\n",
    "min_mover.movemap(mm)\n",
    "min_mover.min_type(\"lbfgs_armijo_nonmonotone\")\n",
    "\n",
    "# Set the number of minimization steps\n",
    "num_minimization_steps = 100\n",
    "for _ in range(num_minimization_steps):\n",
    "    min_mover.apply(pose)\n",
    "\n",
    "# Save the designed peptide structure to a PDB file\n",
    "output_pdb_filename = 'output_peptide.pdb'  # Replace with the desired output file name\n",
    "pose.dump_pdb(output_pdb_filename)\n",
    "print(f\"Designed peptide saved to {output_pdb_filename}\")\n",
    "\n",
    "# Calculate and print the total energy of the designed structure\n",
    "total_energy = pose.energies().total_energies()[ScoreType.total_score]\n",
    "print(f\"Total Energy: {total_energy:.2f} kcal/mol\")\n",
    "\n",
    "# Calculate and print per-residue energies (optional)\n",
    "for i in range(1, pose.total_residue() + 1):\n",
    "    residue_energy = pose.energies().residue_total_energies(i)\n",
    "    print(f\"Residue {i}: Total Energy = {residue_energy[ScoreType.total_score]:.2f} kcal/mol\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "33cc21b4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
